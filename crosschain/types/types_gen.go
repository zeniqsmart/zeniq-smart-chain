package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CCEpoch) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "StartHeight":
			z.StartHeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StartHeight")
				return
			}
		case "EndTime":
			z.EndTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "TransferInfos":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TransferInfos")
				return
			}
			if cap(z.TransferInfos) >= int(zb0002) {
				z.TransferInfos = (z.TransferInfos)[:zb0002]
			} else {
				z.TransferInfos = make([]*CCTransferInfo, zb0002)
			}
			for za0001 := range z.TransferInfos {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TransferInfos", za0001)
						return
					}
					z.TransferInfos[za0001] = nil
				} else {
					if z.TransferInfos[za0001] == nil {
						z.TransferInfos[za0001] = new(CCTransferInfo)
					}
					err = z.TransferInfos[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "TransferInfos", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CCEpoch) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Number"
	err = en.Append(0x84, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Number)
	if err != nil {
		err = msgp.WrapError(err, "Number")
		return
	}
	// write "StartHeight"
	err = en.Append(0xab, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StartHeight)
	if err != nil {
		err = msgp.WrapError(err, "StartHeight")
		return
	}
	// write "EndTime"
	err = en.Append(0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.EndTime)
	if err != nil {
		err = msgp.WrapError(err, "EndTime")
		return
	}
	// write "TransferInfos"
	err = en.Append(0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TransferInfos)))
	if err != nil {
		err = msgp.WrapError(err, "TransferInfos")
		return
	}
	for za0001 := range z.TransferInfos {
		if z.TransferInfos[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.TransferInfos[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "TransferInfos", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CCEpoch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Number"
	o = append(o, 0x84, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.Number)
	// string "StartHeight"
	o = append(o, 0xab, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.StartHeight)
	// string "EndTime"
	o = append(o, 0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.EndTime)
	// string "TransferInfos"
	o = append(o, 0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TransferInfos)))
	for za0001 := range z.TransferInfos {
		if z.TransferInfos[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.TransferInfos[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TransferInfos", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CCEpoch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "StartHeight":
			z.StartHeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartHeight")
				return
			}
		case "EndTime":
			z.EndTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "TransferInfos":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransferInfos")
				return
			}
			if cap(z.TransferInfos) >= int(zb0002) {
				z.TransferInfos = (z.TransferInfos)[:zb0002]
			} else {
				z.TransferInfos = make([]*CCTransferInfo, zb0002)
			}
			for za0001 := range z.TransferInfos {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TransferInfos[za0001] = nil
				} else {
					if z.TransferInfos[za0001] == nil {
						z.TransferInfos[za0001] = new(CCTransferInfo)
					}
					bts, err = z.TransferInfos[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TransferInfos", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CCEpoch) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int64Size + 12 + msgp.Int64Size + 8 + msgp.Int64Size + 14 + msgp.ArrayHeaderSize
	for za0001 := range z.TransferInfos {
		if z.TransferInfos[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.TransferInfos[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CCInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GenesisMainnetBlockHeight":
			z.GenesisMainnetBlockHeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
				return
			}
		case "CurrEpochNum":
			z.CurrEpochNum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CurrEpochNum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CCInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "GenesisMainnetBlockHeight"
	err = en.Append(0x82, 0xb9, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.GenesisMainnetBlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
		return
	}
	// write "CurrEpochNum"
	err = en.Append(0xac, 0x43, 0x75, 0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CurrEpochNum)
	if err != nil {
		err = msgp.WrapError(err, "CurrEpochNum")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CCInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "GenesisMainnetBlockHeight"
	o = append(o, 0x82, 0xb9, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.GenesisMainnetBlockHeight)
	// string "CurrEpochNum"
	o = append(o, 0xac, 0x43, 0x75, 0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt64(o, z.CurrEpochNum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CCInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GenesisMainnetBlockHeight":
			z.GenesisMainnetBlockHeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
				return
			}
		case "CurrEpochNum":
			z.CurrEpochNum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrEpochNum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CCInfo) Msgsize() (s int) {
	s = 1 + 26 + msgp.Int64Size + 13 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CCTransferInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UTXO":
			err = dc.ReadExactBytes((z.UTXO)[:])
			if err != nil {
				err = msgp.WrapError(err, "UTXO")
				return
			}
		case "Amount":
			z.Amount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "SenderPubkey":
			err = dc.ReadExactBytes((z.SenderPubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "SenderPubkey")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CCTransferInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "UTXO"
	err = en.Append(0x83, 0xa4, 0x55, 0x54, 0x58, 0x4f)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.UTXO)[:])
	if err != nil {
		err = msgp.WrapError(err, "UTXO")
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	// write "SenderPubkey"
	err = en.Append(0xac, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.SenderPubkey)[:])
	if err != nil {
		err = msgp.WrapError(err, "SenderPubkey")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CCTransferInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "UTXO"
	o = append(o, 0x83, 0xa4, 0x55, 0x54, 0x58, 0x4f)
	o = msgp.AppendBytes(o, (z.UTXO)[:])
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendUint64(o, z.Amount)
	// string "SenderPubkey"
	o = append(o, 0xac, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, (z.SenderPubkey)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CCTransferInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UTXO":
			bts, err = msgp.ReadExactBytes(bts, (z.UTXO)[:])
			if err != nil {
				err = msgp.WrapError(err, "UTXO")
				return
			}
		case "Amount":
			z.Amount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "SenderPubkey":
			bts, err = msgp.ReadExactBytes(bts, (z.SenderPubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "SenderPubkey")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CCTransferInfo) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize + (36 * (msgp.ByteSize)) + 7 + msgp.Uint64Size + 13 + msgp.ArrayHeaderSize + (33 * (msgp.ByteSize))
	return
}
