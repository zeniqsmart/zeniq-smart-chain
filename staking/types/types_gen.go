package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Epoch) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "StartHeight":
			z.StartHeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StartHeight")
				return
			}
		case "EndTime":
			z.EndTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "Nominations":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Nominations")
				return
			}
			if cap(z.Nominations) >= int(zb0002) {
				z.Nominations = (z.Nominations)[:zb0002]
			} else {
				z.Nominations = make([]*Nomination, zb0002)
			}
			for za0001 := range z.Nominations {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Nominations", za0001)
						return
					}
					z.Nominations[za0001] = nil
				} else {
					if z.Nominations[za0001] == nil {
						z.Nominations[za0001] = new(Nomination)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Nominations", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Nominations", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Pubkey":
							err = dc.ReadExactBytes((z.Nominations[za0001].Pubkey)[:])
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001, "Pubkey")
								return
							}
						case "NominatedCount":
							z.Nominations[za0001].NominatedCount, err = dc.ReadInt64()
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001, "NominatedCount")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Epoch) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Number"
	err = en.Append(0x84, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Number)
	if err != nil {
		err = msgp.WrapError(err, "Number")
		return
	}
	// write "StartHeight"
	err = en.Append(0xab, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StartHeight)
	if err != nil {
		err = msgp.WrapError(err, "StartHeight")
		return
	}
	// write "EndTime"
	err = en.Append(0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.EndTime)
	if err != nil {
		err = msgp.WrapError(err, "EndTime")
		return
	}
	// write "Nominations"
	err = en.Append(0xab, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Nominations)))
	if err != nil {
		err = msgp.WrapError(err, "Nominations")
		return
	}
	for za0001 := range z.Nominations {
		if z.Nominations[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Pubkey"
			err = en.Append(0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
			if err != nil {
				return
			}
			err = en.WriteBytes((z.Nominations[za0001].Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "Nominations", za0001, "Pubkey")
				return
			}
			// write "NominatedCount"
			err = en.Append(0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt64(z.Nominations[za0001].NominatedCount)
			if err != nil {
				err = msgp.WrapError(err, "Nominations", za0001, "NominatedCount")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Epoch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Number"
	o = append(o, 0x84, 0xa6, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.Number)
	// string "StartHeight"
	o = append(o, 0xab, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.StartHeight)
	// string "EndTime"
	o = append(o, 0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.EndTime)
	// string "Nominations"
	o = append(o, 0xab, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Nominations)))
	for za0001 := range z.Nominations {
		if z.Nominations[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Pubkey"
			o = append(o, 0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (z.Nominations[za0001].Pubkey)[:])
			// string "NominatedCount"
			o = append(o, 0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendInt64(o, z.Nominations[za0001].NominatedCount)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Epoch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Number":
			z.Number, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "StartHeight":
			z.StartHeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartHeight")
				return
			}
		case "EndTime":
			z.EndTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "Nominations":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nominations")
				return
			}
			if cap(z.Nominations) >= int(zb0002) {
				z.Nominations = (z.Nominations)[:zb0002]
			} else {
				z.Nominations = make([]*Nomination, zb0002)
			}
			for za0001 := range z.Nominations {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Nominations[za0001] = nil
				} else {
					if z.Nominations[za0001] == nil {
						z.Nominations[za0001] = new(Nomination)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Nominations", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Nominations", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Pubkey":
							bts, err = msgp.ReadExactBytes(bts, (z.Nominations[za0001].Pubkey)[:])
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001, "Pubkey")
								return
							}
						case "NominatedCount":
							z.Nominations[za0001].NominatedCount, bts, err = msgp.ReadInt64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001, "NominatedCount")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Nominations", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Epoch) Msgsize() (s int) {
	s = 1 + 7 + msgp.Int64Size + 12 + msgp.Int64Size + 8 + msgp.Int64Size + 12 + msgp.ArrayHeaderSize
	for za0001 := range z.Nominations {
		if z.Nominations[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 15 + msgp.Int64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Nomination) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pubkey":
			err = dc.ReadExactBytes((z.Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "NominatedCount":
			z.NominatedCount, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NominatedCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Nomination) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Pubkey"
	err = en.Append(0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Pubkey)[:])
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "NominatedCount"
	err = en.Append(0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NominatedCount)
	if err != nil {
		err = msgp.WrapError(err, "NominatedCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Nomination) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Pubkey"
	o = append(o, 0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, (z.Pubkey)[:])
	// string "NominatedCount"
	o = append(o, 0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt64(o, z.NominatedCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Nomination) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pubkey":
			bts, err = msgp.ReadExactBytes(bts, (z.Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "NominatedCount":
			z.NominatedCount, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NominatedCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Nomination) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 15 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NominationHeap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0003) {
		(*z) = (*z)[:zb0003]
	} else {
		(*z) = make(NominationHeap, zb0003)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(Nomination)
			}
			var field []byte
			_ = field
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "Pubkey":
					err = dc.ReadExactBytes(((*z)[zb0001].Pubkey)[:])
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Pubkey")
						return
					}
				case "NominatedCount":
					(*z)[zb0001].NominatedCount, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "NominatedCount")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NominationHeap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0005 := range z {
		if z[zb0005] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Pubkey"
			err = en.Append(0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
			if err != nil {
				return
			}
			err = en.WriteBytes((z[zb0005].Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, zb0005, "Pubkey")
				return
			}
			// write "NominatedCount"
			err = en.Append(0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt64(z[zb0005].NominatedCount)
			if err != nil {
				err = msgp.WrapError(err, zb0005, "NominatedCount")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NominationHeap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0005 := range z {
		if z[zb0005] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Pubkey"
			o = append(o, 0x82, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
			o = msgp.AppendBytes(o, (z[zb0005].Pubkey)[:])
			// string "NominatedCount"
			o = append(o, 0xae, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74)
			o = msgp.AppendInt64(o, z[zb0005].NominatedCount)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NominationHeap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0003) {
		(*z) = (*z)[:zb0003]
	} else {
		(*z) = make(NominationHeap, zb0003)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(Nomination)
			}
			var field []byte
			_ = field
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
				switch msgp.UnsafeString(field) {
				case "Pubkey":
					bts, err = msgp.ReadExactBytes(bts, ((*z)[zb0001].Pubkey)[:])
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Pubkey")
						return
					}
				case "NominatedCount":
					(*z)[zb0001].NominatedCount, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "NominatedCount")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001)
						return
					}
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NominationHeap) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0005 := range z {
		if z[zb0005] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 15 + msgp.Int64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PendingReward) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			err = dc.ReadExactBytes((z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "EpochNum":
			z.EpochNum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "EpochNum")
				return
			}
		case "Amount":
			err = dc.ReadExactBytes((z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PendingReward) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Address"
	err = en.Append(0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Address)[:])
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "EpochNum"
	err = en.Append(0xa8, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.EpochNum)
	if err != nil {
		err = msgp.WrapError(err, "EpochNum")
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Amount)[:])
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PendingReward) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Address"
	o = append(o, 0x83, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, (z.Address)[:])
	// string "EpochNum"
	o = append(o, 0xa8, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt64(o, z.EpochNum)
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendBytes(o, (z.Amount)[:])
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PendingReward) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			bts, err = msgp.ReadExactBytes(bts, (z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "EpochNum":
			z.EpochNum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EpochNum")
				return
			}
		case "Amount":
			bts, err = msgp.ReadExactBytes(bts, (z.Amount)[:])
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PendingReward) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 9 + msgp.Int64Size + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StakingInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GenesisMainnetBlockHeight":
			z.GenesisMainnetBlockHeight, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
				return
			}
		case "CurrEpochNum":
			z.CurrEpochNum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CurrEpochNum")
				return
			}
		case "Validators":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Validators")
				return
			}
			if cap(z.Validators) >= int(zb0002) {
				z.Validators = (z.Validators)[:zb0002]
			} else {
				z.Validators = make([]*Validator, zb0002)
			}
			for za0001 := range z.Validators {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Validators", za0001)
						return
					}
					z.Validators[za0001] = nil
				} else {
					if z.Validators[za0001] == nil {
						z.Validators[za0001] = new(Validator)
					}
					err = z.Validators[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Validators", za0001)
						return
					}
				}
			}
		case "ValidatorsUpdate":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ValidatorsUpdate")
				return
			}
			if cap(z.ValidatorsUpdate) >= int(zb0003) {
				z.ValidatorsUpdate = (z.ValidatorsUpdate)[:zb0003]
			} else {
				z.ValidatorsUpdate = make([]*Validator, zb0003)
			}
			for za0002 := range z.ValidatorsUpdate {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "ValidatorsUpdate", za0002)
						return
					}
					z.ValidatorsUpdate[za0002] = nil
				} else {
					if z.ValidatorsUpdate[za0002] == nil {
						z.ValidatorsUpdate[za0002] = new(Validator)
					}
					err = z.ValidatorsUpdate[za0002].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "ValidatorsUpdate", za0002)
						return
					}
				}
			}
		case "PendingRewards":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PendingRewards")
				return
			}
			if cap(z.PendingRewards) >= int(zb0004) {
				z.PendingRewards = (z.PendingRewards)[:zb0004]
			} else {
				z.PendingRewards = make([]*PendingReward, zb0004)
			}
			for za0003 := range z.PendingRewards {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "PendingRewards", za0003)
						return
					}
					z.PendingRewards[za0003] = nil
				} else {
					if z.PendingRewards[za0003] == nil {
						z.PendingRewards[za0003] = new(PendingReward)
					}
					err = z.PendingRewards[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "PendingRewards", za0003)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StakingInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "GenesisMainnetBlockHeight"
	err = en.Append(0x85, 0xb9, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.GenesisMainnetBlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
		return
	}
	// write "CurrEpochNum"
	err = en.Append(0xac, 0x43, 0x75, 0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CurrEpochNum)
	if err != nil {
		err = msgp.WrapError(err, "CurrEpochNum")
		return
	}
	// write "Validators"
	err = en.Append(0xaa, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Validators)))
	if err != nil {
		err = msgp.WrapError(err, "Validators")
		return
	}
	for za0001 := range z.Validators {
		if z.Validators[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Validators[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Validators", za0001)
				return
			}
		}
	}
	// write "ValidatorsUpdate"
	err = en.Append(0xb0, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ValidatorsUpdate)))
	if err != nil {
		err = msgp.WrapError(err, "ValidatorsUpdate")
		return
	}
	for za0002 := range z.ValidatorsUpdate {
		if z.ValidatorsUpdate[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ValidatorsUpdate[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorsUpdate", za0002)
				return
			}
		}
	}
	// write "PendingRewards"
	err = en.Append(0xae, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PendingRewards)))
	if err != nil {
		err = msgp.WrapError(err, "PendingRewards")
		return
	}
	for za0003 := range z.PendingRewards {
		if z.PendingRewards[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.PendingRewards[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "PendingRewards", za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StakingInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "GenesisMainnetBlockHeight"
	o = append(o, 0x85, 0xb9, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.GenesisMainnetBlockHeight)
	// string "CurrEpochNum"
	o = append(o, 0xac, 0x43, 0x75, 0x72, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d)
	o = msgp.AppendInt64(o, z.CurrEpochNum)
	// string "Validators"
	o = append(o, 0xaa, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Validators)))
	for za0001 := range z.Validators {
		if z.Validators[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Validators[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Validators", za0001)
				return
			}
		}
	}
	// string "ValidatorsUpdate"
	o = append(o, 0xb0, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ValidatorsUpdate)))
	for za0002 := range z.ValidatorsUpdate {
		if z.ValidatorsUpdate[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ValidatorsUpdate[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorsUpdate", za0002)
				return
			}
		}
	}
	// string "PendingRewards"
	o = append(o, 0xae, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PendingRewards)))
	for za0003 := range z.PendingRewards {
		if z.PendingRewards[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.PendingRewards[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PendingRewards", za0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StakingInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "GenesisMainnetBlockHeight":
			z.GenesisMainnetBlockHeight, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GenesisMainnetBlockHeight")
				return
			}
		case "CurrEpochNum":
			z.CurrEpochNum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CurrEpochNum")
				return
			}
		case "Validators":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Validators")
				return
			}
			if cap(z.Validators) >= int(zb0002) {
				z.Validators = (z.Validators)[:zb0002]
			} else {
				z.Validators = make([]*Validator, zb0002)
			}
			for za0001 := range z.Validators {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Validators[za0001] = nil
				} else {
					if z.Validators[za0001] == nil {
						z.Validators[za0001] = new(Validator)
					}
					bts, err = z.Validators[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Validators", za0001)
						return
					}
				}
			}
		case "ValidatorsUpdate":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ValidatorsUpdate")
				return
			}
			if cap(z.ValidatorsUpdate) >= int(zb0003) {
				z.ValidatorsUpdate = (z.ValidatorsUpdate)[:zb0003]
			} else {
				z.ValidatorsUpdate = make([]*Validator, zb0003)
			}
			for za0002 := range z.ValidatorsUpdate {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.ValidatorsUpdate[za0002] = nil
				} else {
					if z.ValidatorsUpdate[za0002] == nil {
						z.ValidatorsUpdate[za0002] = new(Validator)
					}
					bts, err = z.ValidatorsUpdate[za0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "ValidatorsUpdate", za0002)
						return
					}
				}
			}
		case "PendingRewards":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PendingRewards")
				return
			}
			if cap(z.PendingRewards) >= int(zb0004) {
				z.PendingRewards = (z.PendingRewards)[:zb0004]
			} else {
				z.PendingRewards = make([]*PendingReward, zb0004)
			}
			for za0003 := range z.PendingRewards {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.PendingRewards[za0003] = nil
				} else {
					if z.PendingRewards[za0003] == nil {
						z.PendingRewards[za0003] = new(PendingReward)
					}
					bts, err = z.PendingRewards[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "PendingRewards", za0003)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StakingInfo) Msgsize() (s int) {
	s = 1 + 26 + msgp.Int64Size + 13 + msgp.Int64Size + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Validators {
		if z.Validators[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Validators[za0001].Msgsize()
		}
	}
	s += 17 + msgp.ArrayHeaderSize
	for za0002 := range z.ValidatorsUpdate {
		if z.ValidatorsUpdate[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.ValidatorsUpdate[za0002].Msgsize()
		}
	}
	s += 15 + msgp.ArrayHeaderSize
	for za0003 := range z.PendingRewards {
		if z.PendingRewards[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.PendingRewards[za0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Validator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			err = dc.ReadExactBytes((z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Pubkey":
			err = dc.ReadExactBytes((z.Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "RewardTo":
			err = dc.ReadExactBytes((z.RewardTo)[:])
			if err != nil {
				err = msgp.WrapError(err, "RewardTo")
				return
			}
		case "VotingPower":
			z.VotingPower, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "VotingPower")
				return
			}
		case "Introduction":
			z.Introduction, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Introduction")
				return
			}
		case "StakedCoins":
			err = dc.ReadExactBytes((z.StakedCoins)[:])
			if err != nil {
				err = msgp.WrapError(err, "StakedCoins")
				return
			}
		case "IsRetiring":
			z.IsRetiring, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsRetiring")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Validator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Address"
	err = en.Append(0x87, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Address)[:])
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "Pubkey"
	err = en.Append(0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.Pubkey)[:])
	if err != nil {
		err = msgp.WrapError(err, "Pubkey")
		return
	}
	// write "RewardTo"
	err = en.Append(0xa8, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.RewardTo)[:])
	if err != nil {
		err = msgp.WrapError(err, "RewardTo")
		return
	}
	// write "VotingPower"
	err = en.Append(0xab, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.VotingPower)
	if err != nil {
		err = msgp.WrapError(err, "VotingPower")
		return
	}
	// write "Introduction"
	err = en.Append(0xac, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Introduction)
	if err != nil {
		err = msgp.WrapError(err, "Introduction")
		return
	}
	// write "StakedCoins"
	err = en.Append(0xab, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBytes((z.StakedCoins)[:])
	if err != nil {
		err = msgp.WrapError(err, "StakedCoins")
		return
	}
	// write "IsRetiring"
	err = en.Append(0xaa, 0x49, 0x73, 0x52, 0x65, 0x74, 0x69, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsRetiring)
	if err != nil {
		err = msgp.WrapError(err, "IsRetiring")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Validator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Address"
	o = append(o, 0x87, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendBytes(o, (z.Address)[:])
	// string "Pubkey"
	o = append(o, 0xa6, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, (z.Pubkey)[:])
	// string "RewardTo"
	o = append(o, 0xa8, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f)
	o = msgp.AppendBytes(o, (z.RewardTo)[:])
	// string "VotingPower"
	o = append(o, 0xab, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72)
	o = msgp.AppendInt64(o, z.VotingPower)
	// string "Introduction"
	o = append(o, 0xac, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Introduction)
	// string "StakedCoins"
	o = append(o, 0xab, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73)
	o = msgp.AppendBytes(o, (z.StakedCoins)[:])
	// string "IsRetiring"
	o = append(o, 0xaa, 0x49, 0x73, 0x52, 0x65, 0x74, 0x69, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendBool(o, z.IsRetiring)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Validator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Address":
			bts, err = msgp.ReadExactBytes(bts, (z.Address)[:])
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Pubkey":
			bts, err = msgp.ReadExactBytes(bts, (z.Pubkey)[:])
			if err != nil {
				err = msgp.WrapError(err, "Pubkey")
				return
			}
		case "RewardTo":
			bts, err = msgp.ReadExactBytes(bts, (z.RewardTo)[:])
			if err != nil {
				err = msgp.WrapError(err, "RewardTo")
				return
			}
		case "VotingPower":
			z.VotingPower, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VotingPower")
				return
			}
		case "Introduction":
			z.Introduction, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Introduction")
				return
			}
		case "StakedCoins":
			bts, err = msgp.ReadExactBytes(bts, (z.StakedCoins)[:])
			if err != nil {
				err = msgp.WrapError(err, "StakedCoins")
				return
			}
		case "IsRetiring":
			z.IsRetiring, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsRetiring")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Validator) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 7 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 9 + msgp.ArrayHeaderSize + (20 * (msgp.ByteSize)) + 12 + msgp.Int64Size + 13 + msgp.StringPrefixSize + len(z.Introduction) + 12 + msgp.ArrayHeaderSize + (32 * (msgp.ByteSize)) + 11 + msgp.BoolSize
	return
}
