package seps_test

import (
	"math/big"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/zeniqsmart/zeniq-smart-chain/internal/testutils"
)

// testdata/sol/contracts/erc20/MyERC20.sol
var _myTokenCreationBytecode = testutils.HexToBytes(`60806040523480156200001157600080fd5b506305f5e1006040518060400160405280600781526020017f4d7945524332300000000000000000000000000000000000000000000000000081525060126040518060400160405280600581526020017f4d5945524300000000000000000000000000000000000000000000000000000081525083600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550836000819055508260039080519060200190620000e892919062000127565b5081600460006101000a81548160ff021916908360ff16021790555080600590805190602001906200011c92919062000127565b50505050506200023c565b8280546200013590620001d7565b90600052602060002090601f016020900481019282620001595760008555620001a5565b82601f106200017457805160ff1916838001178555620001a5565b82800160010185558215620001a5579182015b82811115620001a457825182559160200191906001019062000187565b5b509050620001b49190620001b8565b5090565b5b80821115620001d3576000816000905550600101620001b9565b5090565b60006002820490506001821680620001f057607f821691505b602082108114156200020757620002066200020d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610dec806200024c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063313ce56711610071578063313ce5671461017a5780635c6581651461019857806370a08231146101c857806395d89b41146101f8578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a57806327e235e31461014a575b600080fd5b6100b6610276565b6040516100c39190610b61565b60405180910390f35b6100e660048036038101906100e19190610aa4565b610304565b6040516100f39190610b46565b60405180910390f35b6101046103f6565b6040516101119190610b83565b60405180910390f35b610134600480360381019061012f9190610a55565b6103fc565b6040516101419190610b46565b60405180910390f35b610164600480360381019061015f91906109f0565b6106af565b6040516101719190610b83565b60405180910390f35b6101826106c7565b60405161018f9190610b9e565b60405180910390f35b6101b260048036038101906101ad9190610a19565b6106da565b6040516101bf9190610b83565b60405180910390f35b6101e260048036038101906101dd91906109f0565b6106ff565b6040516101ef9190610b83565b60405180910390f35b610200610748565b60405161020d9190610b61565b60405180910390f35b610230600480360381019061022b9190610aa4565b6107d6565b60405161023d9190610b46565b60405180910390f35b610260600480360381019061025b9190610a19565b61093f565b60405161026d9190610b83565b60405180910390f35b6003805461028390610ce7565b80601f01602080910402602001604051908101604052809291908181526020018280546102af90610ce7565b80156102fc5780601f106102d1576101008083540402835291602001916102fc565b820191906000526020600020905b8154815290600101906020018083116102df57829003601f168201915b505050505081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103e49190610b83565b60405180910390a36001905092915050565b60005481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156104cd5750828110155b6104d657600080fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105259190610bd5565b9250508190555082600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461057b9190610c2b565b925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561063e5782600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106369190610c2b565b925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161069b9190610b83565b60405180910390a360019150509392505050565b60016020528060005260406000206000915090505481565b600460009054906101000a900460ff1681565b6002602052816000526040600020602052806000526040600020600091509150505481565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6005805461075590610ce7565b80601f016020809104026020016040519081016040528092919081815260200182805461078190610ce7565b80156107ce5780601f106107a3576101008083540402835291602001916107ce565b820191906000526020600020905b8154815290600101906020018083116107b157829003601f168201915b505050505081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561082457600080fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108739190610c2b565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108c99190610bd5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161092d9190610b83565b60405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000813590506109d581610d88565b92915050565b6000813590506109ea81610d9f565b92915050565b600060208284031215610a0257600080fd5b6000610a10848285016109c6565b91505092915050565b60008060408385031215610a2c57600080fd5b6000610a3a858286016109c6565b9250506020610a4b858286016109c6565b9150509250929050565b600080600060608486031215610a6a57600080fd5b6000610a78868287016109c6565b9350506020610a89868287016109c6565b9250506040610a9a868287016109db565b9150509250925092565b60008060408385031215610ab757600080fd5b6000610ac5858286016109c6565b9250506020610ad6858286016109db565b9150509250929050565b610ae981610c71565b82525050565b6000610afa82610bb9565b610b048185610bc4565b9350610b14818560208601610cb4565b610b1d81610d77565b840191505092915050565b610b3181610c9d565b82525050565b610b4081610ca7565b82525050565b6000602082019050610b5b6000830184610ae0565b92915050565b60006020820190508181036000830152610b7b8184610aef565b905092915050565b6000602082019050610b986000830184610b28565b92915050565b6000602082019050610bb36000830184610b37565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610be082610c9d565b9150610beb83610c9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610c2057610c1f610d19565b5b828201905092915050565b6000610c3682610c9d565b9150610c4183610c9d565b925082821015610c5457610c53610d19565b5b828203905092915050565b6000610c6a82610c7d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610cd2578082015181840152602081019050610cb7565b83811115610ce1576000848401525b50505050565b60006002820490506001821680610cff57607f821691505b60208210811415610d1357610d12610d48565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b610d9181610c5f565b8114610d9c57600080fd5b50565b610da881610c9d565b8114610db357600080fd5b5056fea2646970667358221220dc79809342d35bd9095751ba03cd133e6e822d463350c61223ac1fc7ebda8ec464736f6c63430008000033`)

func TestGetSep20FromToAddressCount(t *testing.T) {
	key1, addr1 := testutils.GenKeyAndAddr()
	key2, addr2 := testutils.GenKeyAndAddr()
	key3, addr3 := testutils.GenKeyAndAddr()
	key4, addr4 := testutils.GenKeyAndAddr()
	_app := testutils.CreateTestApp(key1, key2, key3, key4)
	defer _app.Destroy()

	_, _, contractAddr := _app.DeployContractInBlock(key1, _myTokenCreationBytecode)
	require.NotEmpty(t, _app.GetCode(contractAddr))

	// addr1 => addr2
	tx1, _ := _app.MakeAndExecTxInBlock(key1, contractAddr, 0,
		sep206ABI.MustPack("transfer", addr2, big.NewInt(100)))

	// addr1 => addr3
	tx2, _ := _app.MakeAndExecTxInBlock(key1, contractAddr, 0,
		sep206ABI.MustPack("transfer", addr3, big.NewInt(100)))

	// addr1 => addr4
	tx3, _ := _app.MakeAndExecTxInBlock(key1, contractAddr, 0,
		sep206ABI.MustPack("transfer", addr4, big.NewInt(100)))

	// addr2 => addr4
	tx4, _ := _app.MakeAndExecTxInBlock(key2, contractAddr, 0,
		sep206ABI.MustPack("approve", addr3, big.NewInt(9999999)))
	tx5, _ := _app.MakeAndExecTxInBlock(key3, contractAddr, 0,
		sep206ABI.MustPack("transferFrom", addr2, addr4, big.NewInt(55)))

	_app.WaitMS(200)
	require.Equal(t, "success", _app.GetTx(tx1.Hash()).StatusStr)
	require.Equal(t, "success", _app.GetTx(tx2.Hash()).StatusStr)
	require.Equal(t, "success", _app.GetTx(tx3.Hash()).StatusStr)
	require.Equal(t, "success", _app.GetTx(tx4.Hash()).StatusStr)
	require.Equal(t, "success", _app.GetTx(tx5.Hash()).StatusStr)

	require.Equal(t, int64(3), _app.GetSep20FromAddressCount(contractAddr, addr1))
	require.Equal(t, int64(1), _app.GetSep20FromAddressCount(contractAddr, addr2))
	require.Equal(t, int64(0), _app.GetSep20FromAddressCount(contractAddr, addr3))
	require.Equal(t, int64(0), _app.GetSep20FromAddressCount(contractAddr, addr4))

	require.Equal(t, int64(0), _app.GetSep20ToAddressCount(contractAddr, addr1))
	require.Equal(t, int64(1), _app.GetSep20ToAddressCount(contractAddr, addr2))
	require.Equal(t, int64(1), _app.GetSep20ToAddressCount(contractAddr, addr3))
	require.Equal(t, int64(2), _app.GetSep20ToAddressCount(contractAddr, addr4))
}
